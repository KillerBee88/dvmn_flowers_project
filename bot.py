import telebot
import os
import datetime
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dvmn_flowers_project.settings')

import django
django.setup()

from telebot import types
from dotenv import load_dotenv
from flowerapp.models import Client, Bouquet, Order
from datetime import time
from django.db.models import Q
import itertools


load_dotenv()
bot = telebot.TeleBot(os.environ["TG_TOKEN"])
order ={}

bouquets = []
current_index = 0

@bot.message_handler(commands=['start'])
def main_menu(message):
    client, _ = Client.objects.get_or_create(tg_id=message.from_user.id,
                                            username=message.from_user.username)
    markup = types.InlineKeyboardMarkup()
    first = [types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', text='–Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'), 
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É', text='–Ω–∞ —Å–≤–∞–¥—å–±—É'),
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –≤ —à–∫–æ–ª—É', text='–≤ —à–∫–æ–ª—É'),
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –ø–æ–≤–æ–¥–∞', text='–±–µ–∑ –ø–æ–≤–æ–¥–∞')
    ]
    second = [types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', text='–Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'), 
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É', text='–Ω–∞ —Å–≤–∞–¥—å–±—É'),
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –≤ —à–∫–æ–ª—É', text='–≤ —à–∫–æ–ª—É'),
     types.InlineKeyboardButton(callback_data='–±–µ–∑ –ø–æ–≤–æ–¥–∞', text='–±–µ–∑ –ø–æ–≤–æ–¥–∞'),
     types.InlineKeyboardButton(callback_data='–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã',text='–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã')]
    if Order.objects.filter(client=client):
        for button in second:
            markup.add(button)
    else:
        for button in first:
            markup.add(button)
    bot.send_message(message.from_user.id,
                     'üëã –ü—Ä–∏–≤–µ—Ç! –ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π.',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ'))
def main_menu_2(message):
    client, _ = Client.objects.get_or_create(tg_id=message.from_user.id,
                                            username=message.from_user.username)
    markup = types.InlineKeyboardMarkup()
    first = [types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', text='–Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'), 
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É', text='–Ω–∞ —Å–≤–∞–¥—å–±—É'),
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –≤ —à–∫–æ–ª—É', text='–≤ —à–∫–æ–ª—É'),
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –ø–æ–≤–æ–¥–∞', text='–±–µ–∑ –ø–æ–≤–æ–¥–∞')
    ]
    second = [types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', text='–Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'), 
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É', text='–Ω–∞ —Å–≤–∞–¥—å–±—É'),
     types.InlineKeyboardButton(callback_data='—Å–æ–±—ã—Ç–∏–µ –≤ —à–∫–æ–ª—É', text='–≤ —à–∫–æ–ª—É'),
     types.InlineKeyboardButton(callback_data='–±–µ–∑ –ø–æ–≤–æ–¥–∞', text='–±–µ–∑ –ø–æ–≤–æ–¥–∞'),
     types.InlineKeyboardButton(callback_data='–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã',text='–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã')]
    if Order.objects.filter(client=client):
        for button in second:
            markup.add(button)
    else:
        for button in first:
            markup.add(button)
    bot.send_message(message.from_user.id,
                     'üëã –ü—Ä–∏–≤–µ—Ç! –ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π.',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('—Å–æ–±—ã—Ç–∏–µ'))
def choose_price(call):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data='—Ü–µ–Ω–∞ 500', text='~500')
    btn2 = types.InlineKeyboardButton(callback_data='—Ü–µ–Ω–∞ 1000', text='~1000')
    btn3 = types.InlineKeyboardButton(callback_data='—Ü–µ–Ω–∞ 2000', text='~2000')
    btn4 = types.InlineKeyboardButton(callback_data='—Ü–µ–Ω–∞ –±–æ–ª—å—à–∞—è', text='~–±–æ–ª—å—à–µ')
    btn5 = types.InlineKeyboardButton(callback_data='—Ü–µ–Ω–∞ –ª—é–±–∞—è', text='–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ')
    btn5 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(call.from_user.id, '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('—Ü–µ–Ω–∞'))
def choose_bouquet_or_consult(call):
    selected_price = int(call.data[4:])

    global bouquets, current_index
    current_index = 0
    bouquets = Bouquet.objects.filter(
        Q(price__lte=selected_price) |
        Q(price__isnull=True)
    )

    current_bouquet = bouquets[current_index]
    bot.send_message(call.from_user.id, f'{current_bouquet.name}\n–¶–µ–Ω–∞: {current_bouquet.price}—Ä.')
    bot.send_message(call.from_user.id, current_bouquet.get_info())

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data='–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç', text='–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç')
    btn2 = types.InlineKeyboardButton(callback_data='–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç', text='–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç')
    btn3 = types.InlineKeyboardButton(callback_data='–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', text='–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')
    btn4 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(call.from_user.id, '–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ? –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞)', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == '–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç')
def show_next_bouquet(call):
    global bouquets, current_index

    current_index += 1

    if current_index >= len(bouquets):
        current_index = 0

    next_bouquet = bouquets[current_index]
    bot.send_message(call.from_user.id, f'{next_bouquet.name}\n–¶–µ–Ω–∞: {next_bouquet.price}—Ä.')
    bot.send_message(call.from_user.id, next_bouquet.get_info())

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data='–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç', text='–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç')
    btn2 = types.InlineKeyboardButton(callback_data='–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç', text='–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç')
    btn3 = types.InlineKeyboardButton(callback_data='–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', text='–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')
    btn4 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(call.from_user.id, '–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ? –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞)', reply_markup=markup)

'''–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'''
@bot.callback_query_handler(func=lambda call: call.data.startswith('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'))
def get_phonenumber(call):
    markup = types.InlineKeyboardMarkup()
    msg = bot.send_message(call.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç)', reply_markup=markup)
    bot.register_next_step_handler(msg, call_consult)


def call_consult(call):
    phonenumber = call.text
    bot.send_message(call.from_user.id, "–§–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
    choose_bouquet_or_consult(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç'))
def get_user_name_surname(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn)
    msg  = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:", reply_markup=markup)
    bot.register_next_step_handler(msg, get_address)

def get_address(message):
    order['name'] = message.text
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn)
    msg  = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:", reply_markup=markup)
    bot.register_next_step_handler(msg, get_phone)


def get_phone(message):
    order['address'] = message.text
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn)
    msg  = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(msg, get_delivery_date)


def get_delivery_date(message):
    order['phone'] = message.text
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn)
    msg  = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 2023-08-16):", reply_markup=markup)
    bot.register_next_step_handler(msg, get_delivery_time)


def get_delivery_time(message):
    order['delivery_date'] = message.text
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn)
    msg = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 15:00:00):", reply_markup=markup)
    bot.register_next_step_handler(msg, makeorder)


def makeorder(message):
    order['delivery_time'] = message.text
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn)
    bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω.", reply_markup=markup)

def run_bot():
    bot.polling(none_stop=True, interval=0)


if __name__ == '__main__':
    run_bot()